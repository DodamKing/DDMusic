<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.cjs2108_kdd.dao.SongDAO">
	<select id="getSongIdx" resultType="Integer">
		select idx from song where title = #{title} and artist = #{artist};
	</select>
	
	<select id="getSongCnt" resultType="int">
		select count(*) from song;
	</select>
	
	<select id="getSongVOS" resultType="com.spring.cjs2108_kdd.vo.SongVO">
		select * from song order by idx desc limit #{startNo}, #{pageSize};
	</select>
	
	<update id="setAdminSongUpdate">
		update song set ${column} = #{value} where idx = #{idx};
	</update>
	
	<select id="getSongInfor" resultType="com.spring.cjs2108_kdd.vo.SongVO">
		select * from song where idx = #{idx};
	</select>
	
	<select id="getSongSrch" resultType="com.spring.cjs2108_kdd.vo.SongVO">
		<if test="srchKwd != null">
			select * from song where title like '%${srchKwd}%' or artist like '%${srchKwd}%';
		</if>
		<if test="srchKwd == null">
			select * from song where isFile = 0 and idx != 0;
		</if>
	</select>
	
	<update id="upLikeCnt">
		update song set likeCnt = likeCnt + 1 where idx = #{idx};
	</update>

	<update id="downLikeCnt">
		update song set likeCnt = likeCnt - 1 where idx = #{idx};
	</update>
	
	<select id="getLikeList" resultType="String">
		select likeList from song where idx = #{idx};
	</select>
	
	<update id="setLikeList">
		update song set likeList = #{likeList} where idx = #{idx};
	</update>
	
	<select id="getLyrics" resultType="String">
		select lyrics from song where idx = #{idx};
	</select>
	
	<insert id="addSongDB">
		insert into song (img, title, artist) values (#{img}, #{title}, #{artist});
	</insert>
	
	<select id="isPlayCnt" resultType="int">
		select count(*) from play where songIdx = #{songIdx} and userIdx = #{userIdx};
	</select>
	
	<insert id="setPlayCnt">
		insert into play (songIdx, userIdx) values (#{songIdx}, #{userIdx});
	</insert>
	
	<update id="addPlayCnt">
		update play set playCnt = playCnt + 1 where songIdx = #{songIdx} and userIdx = #{userIdx};
	</update>
	
	<select id="getRank" resultType="com.spring.cjs2108_kdd.vo.SongVO">
		select *, sum(playCnt) as playCntSum from song s left join play p on s.idx = p.songIdx group by s.idx order by sum(playCnt) desc limit 10;
	</select>

	<select id="getMyRank" resultType="com.spring.cjs2108_kdd.vo.SongVO">
		select * from song s left join play p on s.idx = p.songIdx where userIdx = #{idx} and playCnt > 0 order by playCnt desc limit 20;
	</select>
	
	<insert id="insertSong">
		insert into song values (default, #{vo.img}, #{vo.title}, #{vo.artist}, #{vo.album}, #{vo.releaseDate}, #{vo.genre}, #{vo.music}, #{vo.words}, #{vo.arranger}, #{vo.lyrics}, default, default, default);
	</insert>
	
	<select id="isSong" resultType="int">
		select count(*) from song where title = #{title} and artist = #{artist};
	</select>
	
	<update id="setIsfile">
		update song set isFile = 1 where idx = ${idx};
	</update>

	<update id="setIsFileChart">
		update chart set isFile = 1 where title = ${title} and artist = #{artist};
	</update>

	<update id="isFileUpdate">
		<if test="sw == 0">
			update song set isFile = 0 where idx = ${idx};
		</if>
		<if test="sw == 1">
			update song set isFile = 1 where idx = ${idx};
		</if>
	</update>
	
	<select id="getLastIdx" resultType="int">
		select idx from song order by idx desc limit 1;
	</select>
	
	<insert id="setSongUpdate">
		insert into song_update values (default, #{idx}, default);
	</insert>
	
	<select id="getUpdateSong" resultType="com.spring.cjs2108_kdd.vo.SongVO">
		select * from song_update u left join song s on s.idx = u.songIdx order by date desc;
	</select>
	
	<insert id="setChartUpdate">
		insert into chart values
		<foreach collection="vos" item="vo" separator=",">(default, #{vo.img}, #{vo.title}, #{vo.artist}, #{vo.rank}, #{vo.songIdx}, #{vo.isFile}, default)</foreach>
		;
	</insert>
	
	<select id="getChartVOS" resultType="com.spring.cjs2108_kdd.vo.ChartVO">
		<if test="date == null">
			select * from chart where date = (select max(date) from chart) order by rank;
		</if>
		<if test="date != null and date != 'all'">
			select * from chart where date(date) = #{date} order by date desc, rank limit 100;
		</if>
		<if test="date != null and date == 'all'">
			select * from chart group by title, artist;
		</if>
	</select>
	
	<select id="getMinDate" resultType="String">
		select date_format(min(date), "%Y-%m-%d") from chart;
	</select>
	
	<update id="setChartSongIdx">
		update chart set songIdx = #{songIdx} where title = #{title} and artist = #{artist};
	</update>
	
	<!-- 가장 많이 들은 5곡 정보 -->
	<!-- <select id="getDDVOS" resultType="com.spring.cjs2108_kdd.vo.PlayListVO">
		select *, from play p left join song s on p.songIdx = s.idx where isFile = 1 group by p.songIdx order by sum(playCnt) desc limit 5;
	</select> -->
	
</mapper>